<?xml version="1.0" standalone="no"?>

<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"
[
<!ENTITY % SVG.metadata.extra.content "|meta" >
<!ELEMENT meta (#PCDATA) >
<!ATTLIST meta name CDATA #REQUIRED>
]
>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink">
  <style>
.day {
  fill-opacity: 0.2;
}
.start_period {
  fill: green;
}

.hour {
  fill-opacity: 0.1;
}

.even {
  fill: yellow;
}
.uneven {
  fill: blue;
}

.day_label {
  text-anchor: middle; 
  font-size: 40px;
  fill: gray;
}

.hour_label {
  fill: gray;
}

.crewmember {
  text-anchor: end; 
  font-size: 40px;
  fill: black;
}





/* text inside a box */
.label {
  fill: black;
}

.DO {
  fill: orange;
}

.TRN {
  fill: green;
}

.SBY {
  fill: cyan;
}

.TRP {
  fill: blue;
}

.LEG {
  fill: magenta;
}
.LAYOVER {
  fill: yellow;
}
.DEADHEAD {
  fill: white;
}
  </style>
  <script>
    // <![CDATA[
    /** 
     *  SVGPan library 1.2.1
     * ======================
     *
     * Given an unique existing element with id "viewport" (or when missing, the first g 
     * element), including the the library into any SVG adds the following capabilities:
     *
     *  - Mouse panning
     *  - Mouse zooming (using the wheel)
     *  - Object dragging
     *
     * You can configure the behaviour of the pan/zoom/drag with the variables
     * listed in the CONFIGURATION section of this file.
     *
     * Known issues:
     *
     *  - Zooming (while panning) on Safari has still some issues
     *
     * Releases:
     *
     * 1.2.1, Mon Jul  4 00:33:18 CEST 2011, Andrea Leofreddi
     *	- Fixed a regression with mouse wheel (now working on Firefox 5)
     *	- Working with viewBox attribute (#4)
     *	- Added "use strict;" and fixed resulting warnings (#5)
     *	- Added configuration variables, dragging is disabled by default (#3)
     *
     * 1.2, Sat Mar 20 08:42:50 GMT 2010, Zeng Xiaohui
     *	Fixed a bug with browser mouse handler interaction
     *
     * 1.1, Wed Feb  3 17:39:33 GMT 2010, Zeng Xiaohui
     *	Updated the zoom code to support the mouse wheel on Safari/Chrome
     *
     * 1.0, Andrea Leofreddi
     *	First release
     *
     * This code is licensed under the following BSD license:
     *
     * Copyright 2009-2010 Andrea Leofreddi <a.leofreddi@itcharm.com>. All rights reserved.
     * 
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     * 
     *    1. Redistributions of source code must retain the above copyright notice, this list of
     *       conditions and the following disclaimer.
     * 
     *    2. Redistributions in binary form must reproduce the above copyright notice, this list
     *       of conditions and the following disclaimer in the documentation and/or other materials
     *       provided with the distribution.
     * 
     * THIS SOFTWARE IS PROVIDED BY Andrea Leofreddi ``AS IS'' AND ANY EXPRESS OR IMPLIED
     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Andrea Leofreddi OR
     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     * 
     * The views and conclusions contained in the software and documentation are those of the
     * authors and should not be interpreted as representing official policies, either expressed
     * or implied, of Andrea Leofreddi.
     */

    "use strict";

    /// CONFIGURATION 
    /// ====>

    var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
    var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
    var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)

    /// <====
    /// END OF CONFIGURATION 

    var root = document.documentElement;

    var state = 'none', svgRoot, stateTarget, stateOrigin, stateTf;

    setupHandlers(root);

    /**
     * Register handlers
     */
    function setupHandlers(root){
      setAttributes(root, {
          "onmouseup" : "handleMouseUp(evt)",
          "onmousedown" : "handleMouseDown(evt)",
          "onmousemove" : "handleMouseMove(evt)",
          //"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
          });

      if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
        window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
      else
        window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
    }

    /**
     * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
     */
    function getRoot(root) {
      if(typeof(svgRoot) == "undefined") {
        var g = null;

        g = root.getElementById("viewport");

        if(g == null)
          g = root.getElementsByTagName('g')[0];

        if(g == null)
          alert('Unable to obtain SVG root element');

        setCTM(g, g.getCTM());

        g.removeAttribute("viewBox");

        svgRoot = g;
      }

      return svgRoot;
    }

    /**
     * Instance an SVGPoint object with given event coordinates.
     */
    function getEventPoint(evt) {
      var p = root.createSVGPoint();

      p.x = evt.clientX;
      p.y = evt.clientY;

      return p;
    }

    /**
     * Sets the current transform matrix of an element.
     */
    function setCTM(element, matrix) {
      var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

      element.setAttribute("transform", s);
    }

    /**
     * Dumps a matrix to a string (useful for debug).
     */
    function dumpMatrix(matrix) {
      var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

      return s;
    }

    /**
     * Sets attributes of an element.
     */
    function setAttributes(element, attributes){
      for (var i in attributes)
        element.setAttributeNS(null, i, attributes[i]);
    }

    /**
     * Handle mouse wheel event.
     */
    function handleMouseWheel(evt) {
      if(!enableZoom)
        return;

      if(evt.preventDefault)
        evt.preventDefault();

      evt.returnValue = false;

      var svgDoc = evt.target.ownerDocument;

      var delta;

      if(evt.wheelDelta)
        delta = evt.wheelDelta / 3600; // Chrome/Safari
      else
        delta = evt.detail / -90; // Mozilla

      var z = 1 + delta; // Zoom factor: 0.9/1.1

      var g = getRoot(svgDoc);

      var p = getEventPoint(evt);

      p = p.matrixTransform(g.getCTM().inverse());

      // Compute new scale matrix in current mouse position
      var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

      setCTM(g, g.getCTM().multiply(k));

      if(typeof(stateTf) == "undefined")
        stateTf = g.getCTM().inverse();

      stateTf = stateTf.multiply(k.inverse());
    }

    /**
     * Handle mouse move event.
     */
    function handleMouseMove(evt) {
      if(evt.preventDefault)
        evt.preventDefault();

      evt.returnValue = false;

      var svgDoc = evt.target.ownerDocument;

      var g = getRoot(svgDoc);

      // This is the section added to be able to display coordinates.
      var pt = getEventPoint(evt).matrixTransform(g.getCTM().inverse());
      var coordinateX = document.getElementById("coordinateX");
      var coordinateY = document.getElementById("coordinateY");
      coordinateX.firstChild.nodeValue = "X: " + Math.floor(pt.x);
      coordinateY.firstChild.nodeValue = "Y: " + Math.floor(pt.y);

      if(state == 'pan' && enablePan) {
        // Pan mode
        var p = getEventPoint(evt).matrixTransform(stateTf);

        setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
      } else if(state == 'drag' && enableDrag) {
        // Drag mode
        var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

        setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

        stateOrigin = p;
      }
    }

    /**
     * Handle click event.
     */
    function handleMouseDown(evt) {
      if(evt.preventDefault)
        evt.preventDefault();

      evt.returnValue = false;

      var svgDoc = evt.target.ownerDocument;

      var g = getRoot(svgDoc);

      if(
          evt.target.tagName == "svg" 
          || !enableDrag // Pan anyway when drag is disabled and the user clicked on an element 
        ) {
        // Pan mode
        state = 'pan';

        stateTf = g.getCTM().inverse();

        stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
      } else {
        // Drag mode
        state = 'drag';

        stateTarget = evt.target;

        stateTf = g.getCTM().inverse();

        stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
      }
    }

    /**
     * Handle mouse button release event.
     */
    function handleMouseUp(evt) {
      if(evt.preventDefault)
        evt.preventDefault();

      evt.returnValue = false;

      var svgDoc = evt.target.ownerDocument;

      if(state == 'pan' || state == 'drag') {
        // Quit pan mode
        state = '';
      }
    }


    // ]]>
  </script>


  <title>SVG rule demo</title>
  <desc>an awesome graph</desc>


  <defs>
    <g id="day">
      <rect class="day" x="0" y="0" width="1440"  height="2000"/>
    </g>
    <g id="hour">
      <rect class="hour" x="0" y="0" width="60"  height="2000"/>
    </g>
    <g id="hours">
      <use xlink:href="#hour" transform="translate(60,0)"/>
      <use xlink:href="#hour" transform="translate(180,0)"/>
      <use xlink:href="#hour" transform="translate(300,0)"/>
      <use xlink:href="#hour" transform="translate(420,0)"/>
      <use xlink:href="#hour" transform="translate(540,0)"/>
      <use xlink:href="#hour" transform="translate(660,0)"/>
      <use xlink:href="#hour" transform="translate(780,0)"/>
      <use xlink:href="#hour" transform="translate(900,0)"/>
      <use xlink:href="#hour" transform="translate(1020,0)"/>
      <use xlink:href="#hour" transform="translate(1140,0)"/>
      <use xlink:href="#hour" transform="translate(1260,0)"/>
      <use xlink:href="#hour" transform="translate(1380,0)"/>

      <text class="hour_label" x="0" y="20">0h</text>
      <text class="hour_label" x="180" y="20">3h</text>
      <text class="hour_label" x="360" y="20">6h</text>
      <text class="hour_label" x="540" y="20">9h</text>
      <text class="hour_label" x="720" y="20">12h</text>
      <text class="hour_label" x="900" y="20">15h</text>
      <text class="hour_label" x="1080" y="20">18h</text>
      <text class="hour_label" x="1260" y="20">21h</text>
    </g>
  </defs>

  <g id="viewport">
    <!--
    ====================================================================================
    CALENDAR
    ====================================================================================
    -->
    <g id="calendar">
      <text id="intro" x="100" y="50" style="fill:black;font-size:40p">To start, please load a file or set up a calendar through the menu.</text>
    </g>

    <!--
    ====================================================================================
    CREWMEMBERS
    ====================================================================================
    -->
    <g id="crewmembers">
    </g>

    <!--
    ====================================================================================
    ACTIVITIES
    ====================================================================================
    -->
    <g id="activities">
    </g>
  </g>

  <!--
  ====================================================================================
  COORDINATES
  ====================================================================================
  -->
  <g id="coordinate">
    <text x="10" y="20" id="coordinateX" style="position:fixed;"> </text>
    <text x="10" y="40" id="coordinateY" style="position:fixed;"> </text>
  </g>

  <!--
  ====================================================================================
  DSTORE
  ====================================================================================
  -->
   <metadata>
      <meta name="Name">Resistor</meta>
      <meta name="Library">spice2vhd</meta>
      <meta name="Architecture">SPICE</meta>
   </metadata>
   
   <g class="Port">
      <metadata>
         <meta name="PortClass">terminal</meta>
         <meta name="PortType">Electrical</meta>
         <meta name="Name">P</meta>
         <meta name="X">0</meta>
         <meta name="Y">0</meta>
      </metadata>
      <!-- it works. -->
      <!-- <text x="100" y="100" font-size="56" font-family="Arial" font-style="normal" fill="black">TIGIDOU</text> -->
   </g>


</svg>

